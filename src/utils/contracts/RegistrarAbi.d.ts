/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.90.0
  Forc version: 0.60.0
  Fuel-Core version: 0.30.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Enum } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum DomainRenewalErrorInput { CanNotRenewRootDomain = 'CanNotRenewRootDomain' };
export enum DomainRenewalErrorOutput { CanNotRenewRootDomain = 'CanNotRenewRootDomain' };
export enum GracePeriodErrorInput { InvalidGracePeriodDuration = 'InvalidGracePeriodDuration' };
export enum GracePeriodErrorOutput { InvalidGracePeriodDuration = 'InvalidGracePeriodDuration' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export enum ValidationErrorInput { InvalidDomainName = 'InvalidDomainName', InvalidPeriod = 'InvalidPeriod', WrongFeeAmount = 'WrongFeeAmount' };
export enum ValidationErrorOutput { InvalidDomainName = 'InvalidDomainName', InvalidPeriod = 'InvalidPeriod', WrongFeeAmount = 'WrongFeeAmount' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };

export type RegistrarAbiConfigurables = {
  REGISTRY_CONTRACT_ID: ContractIdInput;
  DEFAULT_RESOLVER_CONTRACT_ID: ContractIdInput;
  RESERVER_ADDRESS: string;
};

interface RegistrarAbiInterface extends Interface {
  functions: {
    domain_price: FunctionFragment;
    get_grace_period: FunctionFragment;
    initialize: FunctionFragment;
    mint_domain: FunctionFragment;
    renew_domain: FunctionFragment;
    set_fees: FunctionFragment;
    set_grace_period: FunctionFragment;
    withdraw_funds: FunctionFragment;
  };
}

export class RegistrarAbi extends Contract {
  interface: RegistrarAbiInterface;
  functions: {
    domain_price: InvokeFunction<[domain: StdString, years: BigNumberish], BN>;
    get_grace_period: InvokeFunction<[], BN>;
    initialize: InvokeFunction<[], void>;
    mint_domain: InvokeFunction<[domain: StdString, years: BigNumberish], AssetIdOutput>;
    renew_domain: InvokeFunction<[name: StdString, years: BigNumberish], void>;
    set_fees: InvokeFunction<[three_letter_fee: BigNumberish, four_letter_fee: BigNumberish, long_domain_fee: BigNumberish], void>;
    set_grace_period: InvokeFunction<[grace_period_duration: BigNumberish], void>;
    withdraw_funds: InvokeFunction<[], void>;
  };
}
