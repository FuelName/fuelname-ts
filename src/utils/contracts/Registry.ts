/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.6
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  Bytes,
  FunctionFragment,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum AssetErrorInput { AssetDoesNotExist = 'AssetDoesNotExist' };
export enum AssetErrorOutput { AssetDoesNotExist = 'AssetDoesNotExist' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export type MetadataInput = Enum<{ B256: string, Bytes: Bytes, Int: BigNumberish, String: StdString }>;
export type MetadataOutput = Enum<{ B256: string, Bytes: Bytes, Int: BN, String: StdString }>;
export enum MintErrorInput { AssetAlreadyMinted = 'AssetAlreadyMinted' };
export enum MintErrorOutput { AssetAlreadyMinted = 'AssetAlreadyMinted' };
export enum OwnershipErrorInput { NotDomainOwner = 'NotDomainOwner' };
export enum OwnershipErrorOutput { NotDomainOwner = 'NotDomainOwner' };
export enum RenewalErrorInput { CanNotRenewRootDomain = 'CanNotRenewRootDomain', InvalidExpirationValue = 'InvalidExpirationValue', NoActiveDomainForRenewal = 'NoActiveDomainForRenewal', UnauthorizedTransactionSender = 'UnauthorizedTransactionSender' };
export enum RenewalErrorOutput { CanNotRenewRootDomain = 'CanNotRenewRootDomain', InvalidExpirationValue = 'InvalidExpirationValue', NoActiveDomainForRenewal = 'NoActiveDomainForRenewal', UnauthorizedTransactionSender = 'UnauthorizedTransactionSender' };
export enum UnexpectedErrorInput { Unexpected = 'Unexpected' };
export enum UnexpectedErrorOutput { Unexpected = 'Unexpected' };
export enum ValidationErrorInput { InvalidDomainName = 'InvalidDomainName', ExpirationNotSet = 'ExpirationNotSet', DomainNotPresent = 'DomainNotPresent' };
export enum ValidationErrorOutput { InvalidDomainName = 'InvalidDomainName', ExpirationNotSet = 'ExpirationNotSet', DomainNotPresent = 'DomainNotPresent' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum AccessError",
      "components": [
        {
          "name": "NotOwner",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum AssetError",
      "components": [
        {
          "name": "AssetDoesNotExist",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 16,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 19,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum InitializationError",
      "components": [
        {
          "name": "CannotReinitialized",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "enum Metadata",
      "components": [
        {
          "name": "B256",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "Bytes",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "Int",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "String",
          "type": 22,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "enum MintError",
      "components": [
        {
          "name": "AssetAlreadyMinted",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        14
      ]
    },
    {
      "typeId": 10,
      "type": "enum OwnershipError",
      "components": [
        {
          "name": "NotDomainOwner",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "enum RenewalError",
      "components": [
        {
          "name": "CanNotRenewRootDomain",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidExpirationValue",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "NoActiveDomainForRenewal",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "UnauthorizedTransactionSender",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "enum UnexpectedError",
      "components": [
        {
          "name": "Unexpected",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "enum ValidationError",
      "components": [
        {
          "name": "InvalidDomainName",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ExpirationNotSet",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "DomainNotPresent",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 16,
      "type": "struct Address",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 17,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "struct Bytes",
      "components": [
        {
          "name": "buf",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "len",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 19,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 20,
      "type": "struct OwnershipSet",
      "components": [
        {
          "name": "new_owner",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 21,
      "type": "struct RawBytes",
      "components": [
        {
          "name": "ptr",
          "type": 15,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 22,
      "type": "struct String",
      "components": [
        {
          "name": "bytes",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 23,
      "type": "u64",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 24,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "decimals",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 24,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "name",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 22,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "symbol",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 22,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "total_assets",
      "output": {
        "name": "",
        "type": 23,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "total_supply",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 23,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        },
        {
          "name": "key",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "metadata",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 7,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_id",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "domain_exists",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "domain",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "get_domain_asset_id",
      "output": {
        "name": "",
        "type": 17,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "get_domain_name",
      "output": {
        "name": "",
        "type": 22,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "domain",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "get_expiration",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 23,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "parent",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "get_expiration_by_parent",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 23,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "domain",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "get_grace_period",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 23,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "domain",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "get_resolver",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": [
          {
            "name": "",
            "type": 19,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "initialize",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_id",
          "type": 17,
          "typeArguments": null
        }
      ],
      "name": "is_domain_active",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "recipient",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "name",
          "type": 22,
          "typeArguments": null
        }
      ],
      "name": "register_high_level_domain",
      "output": {
        "name": "",
        "type": 17,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "recipient",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "parent",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "name",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "expiration",
          "type": 9,
          "typeArguments": [
            {
              "name": "",
              "type": 23,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "grace_period",
          "type": 9,
          "typeArguments": [
            {
              "name": "",
              "type": 23,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "resolver",
          "type": 19,
          "typeArguments": null
        }
      ],
      "name": "register_sub_domain",
      "output": {
        "name": "",
        "type": 17,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "parent",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "expiration",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "renew_domain",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "domain",
          "type": 22,
          "typeArguments": null
        },
        {
          "name": "resolver",
          "type": 19,
          "typeArguments": null
        }
      ],
      "name": "set_resolver",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "6932726500726384802",
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": "2161305517876418151",
      "loggedType": {
        "name": "",
        "type": 6,
        "typeArguments": []
      }
    },
    {
      "logId": "16280289466020123285",
      "loggedType": {
        "name": "",
        "type": 20,
        "typeArguments": []
      }
    },
    {
      "logId": "4571204900286667806",
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": "17188485204969729195",
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": "12601836278229916142",
      "loggedType": {
        "name": "",
        "type": 10,
        "typeArguments": []
      }
    },
    {
      "logId": "17962209988124554931",
      "loggedType": {
        "name": "",
        "type": 12,
        "typeArguments": []
      }
    },
    {
      "logId": "3905829842712359200",
      "loggedType": {
        "name": "",
        "type": 11,
        "typeArguments": []
      }
    },
    {
      "logId": "16169998749359270814",
      "loggedType": {
        "name": "",
        "type": 4,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [
  {
    "key": "f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ed",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class RegistryInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    metadata: FunctionFragment;
    domain_exists: FunctionFragment;
    get_domain_asset_id: FunctionFragment;
    get_domain_name: FunctionFragment;
    get_expiration: FunctionFragment;
    get_expiration_by_parent: FunctionFragment;
    get_grace_period: FunctionFragment;
    get_resolver: FunctionFragment;
    initialize: FunctionFragment;
    is_domain_active: FunctionFragment;
    register_high_level_domain: FunctionFragment;
    register_sub_domain: FunctionFragment;
    renew_domain: FunctionFragment;
    set_resolver: FunctionFragment;
  };
}

export class Registry extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: RegistryInterface;
  declare functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    metadata: InvokeFunction<[asset: AssetIdInput, key: StdString], Option<MetadataOutput>>;
    domain_exists: InvokeFunction<[asset_id: AssetIdInput], boolean>;
    get_domain_asset_id: InvokeFunction<[domain: StdString], AssetIdOutput>;
    get_domain_name: InvokeFunction<[asset: AssetIdInput], StdString>;
    get_expiration: InvokeFunction<[domain: StdString], Option<BN>>;
    get_expiration_by_parent: InvokeFunction<[name: StdString, parent: StdString], Option<BN>>;
    get_grace_period: InvokeFunction<[domain: StdString], Option<BN>>;
    get_resolver: InvokeFunction<[domain: StdString], Option<ContractIdOutput>>;
    initialize: InvokeFunction<[], void>;
    is_domain_active: InvokeFunction<[asset_id: AssetIdInput], boolean>;
    register_high_level_domain: InvokeFunction<[recipient: IdentityInput, name: StdString], AssetIdOutput>;
    register_sub_domain: InvokeFunction<[recipient: IdentityInput, parent: StdString, name: StdString, expiration: Option<BigNumberish>, grace_period: Option<BigNumberish>, resolver: ContractIdInput], AssetIdOutput>;
    renew_domain: InvokeFunction<[name: StdString, parent: StdString, expiration: BigNumberish], void>;
    set_resolver: InvokeFunction<[domain: StdString, resolver: ContractIdInput], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
