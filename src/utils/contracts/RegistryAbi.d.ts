/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.91.0
  Forc version: 0.61.1
  Fuel-Core version: 0.30.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum AssetErrorInput { AssetDoesNotExist = 'AssetDoesNotExist' };
export enum AssetErrorOutput { AssetDoesNotExist = 'AssetDoesNotExist' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export type MetadataInput = Enum<{ B256: string, Bytes: Bytes, Int: BigNumberish, String: StdString }>;
export type MetadataOutput = Enum<{ B256: string, Bytes: Bytes, Int: BN, String: StdString }>;
export enum MintErrorInput { AssetAlreadyMinted = 'AssetAlreadyMinted' };
export enum MintErrorOutput { AssetAlreadyMinted = 'AssetAlreadyMinted' };
export enum OwnershipErrorInput { NotDomainOwner = 'NotDomainOwner' };
export enum OwnershipErrorOutput { NotDomainOwner = 'NotDomainOwner' };
export enum RenewalErrorInput { CanNotRenewRootDomain = 'CanNotRenewRootDomain', InvalidExpirationValue = 'InvalidExpirationValue', NoActiveDomainForRenewal = 'NoActiveDomainForRenewal', UnauthorizedTransactionSender = 'UnauthorizedTransactionSender' };
export enum RenewalErrorOutput { CanNotRenewRootDomain = 'CanNotRenewRootDomain', InvalidExpirationValue = 'InvalidExpirationValue', NoActiveDomainForRenewal = 'NoActiveDomainForRenewal', UnauthorizedTransactionSender = 'UnauthorizedTransactionSender' };
export enum UnexpectedErrorInput { Unexpected = 'Unexpected' };
export enum UnexpectedErrorOutput { Unexpected = 'Unexpected' };
export enum ValidationErrorInput { InvalidDomainName = 'InvalidDomainName', ExpirationNotSet = 'ExpirationNotSet', DomainNotPresent = 'DomainNotPresent' };
export enum ValidationErrorOutput { InvalidDomainName = 'InvalidDomainName', ExpirationNotSet = 'ExpirationNotSet', DomainNotPresent = 'DomainNotPresent' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };

interface RegistryAbiInterface extends Interface {
  functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    metadata: FunctionFragment;
    domain_exists: FunctionFragment;
    get_domain_asset_id: FunctionFragment;
    get_domain_name: FunctionFragment;
    get_expiration: FunctionFragment;
    get_expiration_by_parent: FunctionFragment;
    get_grace_period: FunctionFragment;
    get_resolver: FunctionFragment;
    initialize: FunctionFragment;
    is_domain_active: FunctionFragment;
    register_high_level_domain: FunctionFragment;
    register_sub_domain: FunctionFragment;
    renew_domain: FunctionFragment;
    set_resolver: FunctionFragment;
  };
}

export class RegistryAbi extends Contract {
  interface: RegistryAbiInterface;
  functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    metadata: InvokeFunction<[asset: AssetIdInput, key: StdString], Option<MetadataOutput>>;
    domain_exists: InvokeFunction<[asset_id: AssetIdInput], boolean>;
    get_domain_asset_id: InvokeFunction<[domain: StdString], AssetIdOutput>;
    get_domain_name: InvokeFunction<[asset: AssetIdInput], StdString>;
    get_expiration: InvokeFunction<[domain: StdString], Option<BN>>;
    get_expiration_by_parent: InvokeFunction<[name: StdString, parent: StdString], Option<BN>>;
    get_grace_period: InvokeFunction<[domain: StdString], Option<BN>>;
    get_resolver: InvokeFunction<[domain: StdString], Option<ContractIdOutput>>;
    initialize: InvokeFunction<[], void>;
    is_domain_active: InvokeFunction<[asset_id: AssetIdInput], boolean>;
    register_high_level_domain: InvokeFunction<[recipient: IdentityInput, name: StdString], AssetIdOutput>;
    register_sub_domain: InvokeFunction<[recipient: IdentityInput, parent: StdString, name: StdString, expiration: Option<BigNumberish>, grace_period: Option<BigNumberish>, resolver: ContractIdInput], AssetIdOutput>;
    renew_domain: InvokeFunction<[name: StdString, parent: StdString, expiration: BigNumberish], void>;
    set_resolver: InvokeFunction<[domain: StdString, resolver: ContractIdInput], void>;
  };
}
