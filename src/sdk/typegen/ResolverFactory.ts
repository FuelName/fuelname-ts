/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { Resolver } from "./Resolver";

const bytecode = decompressBytecode("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");

export class ResolverFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Resolver.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: Resolver.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<Resolver>> {
    const factory = new ResolverFactory(wallet);
    return factory.deploy(options);
  }
}
